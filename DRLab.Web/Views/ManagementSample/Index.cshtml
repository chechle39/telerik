
@{
    ViewData["Title"] = "Index";
}
@(Html.Kendo().Notification()
    .Name("notification")
    .Position(p => p.Pinned(true).Top(30).Right(30))
    .Stacking(NotificationStackingSettings.Down)
    .Templates(t =>
    {
        t.Add().Type("error").ClientTemplateID("errorTemplate");
        t.Add().Type("success").ClientTemplateID("successTemplate");
    })
)
@using Kendo.Mvc
@section Scripts{
    <script src="~/app/ManagementSample/ManagementSample.js" asp-append-version="true"></script>
    <script src="~/lib/FileSaver/FileSaver.min.js" asp-append-version="true"></script>
    <script>
        var rq = new ManagementSampleController();
        rq.initialize();
    </script>
}
<h1 hidden id="flagStart">@Model.StartDate</h1>
<h1 hidden id="flagEnd">@Model.EndDate</h1>
<section id="isCheck" class="content">
    <div class="container-fluid">
        <section class="content">
            <div class="container-fluid">
                <div class="row">
                    <!-- left column -->
                    <div class="col-md-12">
                        <!-- general form elements -->
                        <div class="card">
                            <div id="ticketsForm" class="k-form k-form-vertical" kendo-validator="true">
                                <div class="card-header row" style="margin-left: 0px;">

                                    <div class="col-4">
                                        <h3 class="card-title" style="font-size: 25px">Sample Management </h3><h6 onclick=onClicSearch() id="btnsearch" style="margin-left: 12px;margin-top: 10px;cursor: pointer;" class="fas fa-search"></h6>
                                        <div id="dayTem"></div>

                                    </div>
                                    <div class="col-2">
                                        @(Html.Kendo().DropDownList()
                                        .Name("color")
                                        .DataTextField("Text")
                                        .DataValueField("Value")
                                        .Events(e => e.Change("change").Select("onSelectRequestAction"))
                                        .BindTo(new List<SelectListItem>() {
                                        new SelectListItem() {
                                            Text = "Request Actions",
                                            Value = "0",
                                        },
                                        new SelectListItem() {
                                            Text = "Open Request",
                                            Value = "1"
                                        },
                                        new SelectListItem() {
                                                Text = "Testing Report",
                                                Value = "2"
                                        },
                                        new SelectListItem() {
                                                Text = "Validation",
                                                Value = "3"
                                        },
                                        })
                                    .Value("0")
                                    .HtmlAttributes(new { style = "width: 100%", @class = "k-dropdown--clear" })
                                    )
                                    </div>
                                    <div class="col-6">
                                        <div style="float:right">
                                            <button onclick="exportexcel()" class="k-button k-primary px-3 py-2">Export</button>
                                            <button onclick="refresh()" class="k-button px-3 py-2">Refresh</button>
                                        </div>

                                    </div>
                                </div>
                                <div class="row" style=" margin-left: 12px;margin-bottom:12px">
                                    <div class="col-3">

                                    </div>
                                </div>
                                <!-- /.card-header -->
                                <!-- form start -->
                                <div class="card-body">
                                    @(Html.Kendo().Grid<DRLab.Data.ViewModels.SampleManagementViewModel>()
                                        .Name("Grid")
                                        .HtmlAttributes(new { style = "height:auto;" })
                                        .Columns(columns =>
                                        {
                                            columns.Bound(p => p.requestNo).Title("Request No#").Width(85);
                                            columns.Bound(p => p.sampleCode).Title("Sample Code").Width(75);
                                            columns.Bound(p => p.sampleName).Title("Sample Name").Width(160);
                                            columns.Bound(p => p.receivceDate).Title("Receive Date").ClientTemplate("#= kendo.toString(kendo.parseDate(receivceDate), 'dd/MM/yyyy') #").Width(80);
                                            columns.Bound(p => p.companyName).Title("Customer Name").Width(180);                                            
                                            columns.Bound(p => p.completedOn).Title("Expected Date").ClientTemplate("#= kendo.toString(kendo.parseDate(completedOn), 'dd/MM/yyyy') #").Width(85);
                                            columns.Bound(p => p.completedOn).ClientTemplate("#= kendo.toString(kendo.parseDate(completedOn), 'dd/MM/yyyy') #").Width(80);
                                            columns.Bound(p => p.labCode).Title("Lab Code").Width(70);                                           
                                            columns.Bound(p => p.Total).Title("Total").Width(53); ;
                                            columns.Bound(p => p.Accept).Title("Accept").Width(53);
                                            columns.Bound(p => p.Reject).Title("Reject").Width(53);
                                            columns.Bound(p => p.Approve).Title("Approve").Width(53);
                                            columns.Bound(p => p.Status).Title("Status").Width(68).ClientTemplate("<span id='badge_#=requestNo#' class='badgeTemplate'></span>");                                          
                                           
                                        })

                                        .Events(ev => ev.Change("onChangex").DataBound("onDataBound"))
                                        .Selectable(selectable => selectable
                                        .Mode(GridSelectionMode.Multiple))
                                        .Pageable()
                                        .Sortable()
                                        .Scrollable()
                                        .DataSource(dataSource => dataSource
                                        .Custom()
                                        .PageSize(20)
                                        .Batch(true)
                                        .Schema(schema =>
                                        {
                                            schema.Model(model =>
                                            {
                                                model.Id(p => p.requestNo);
                                                model.Field(p => p.requestNo).Editable(false).From("requestNo");
                                                model.Field(p => p.receivceDate).From("receivceDate");
                                                model.Field(p => p.companyName).From("companyName");
                                                model.Field(p => p.contactName).From("contactName");
                                            })
                                            .Data(d => "schemaData")
                                            .Total(t => "schemaTotal");
                                        })))
                                </div>
                                <!-- /.card-body -->


                            </div>

                        </div>
                    </div>
                </div>

            </div>
        </section>
    </div>

</section>

@await Html.PartialAsync("../ReportDesign/PartialViewBeforePrint", "BeforePrint")
@Html.Partial("search.cshtml")

<script type="text/javascript">
    let girdData;
    let arrSample = [];
    let arrrequestNo = [];
    let arrResult = [];
    var data = [];
    var dataPrint = [];
    let codeSample;
    let nameSample;
    let customerName;
    let codeRequest;
    function refresh() {
        location.reload(true);
    }
    function exportexcel() {
        var date = document.getElementById("dayData").innerHTML;
        if ($("#multiselect").data("kendoMultiSelect") !== undefined) {
            dataCus = $("#multiselect").data("kendoMultiSelect")._old;
        }
        const data = {
            startDate: date.split('-')[0],
            endDate: date.split('-')[1],
            customer: dataCus
        }
        var oReq = new XMLHttpRequest();
        oReq.open("post", `/ManagementSample/ExportManagementSample`, true);
        oReq.responseType = "blob";
        oReq.onload = function (oEvent) {
            var blob = new Blob([oReq.response], { type: "text/csv" });
            // ...
            saveAs(blob, "SampleManagement.xlsx");
        };
        oReq.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
        oReq.send(JSON.stringify(data))
    }
    $("#dialog").data("kendoDialog").close();
    function showDeleteConfirmation(e) {
        var deleteRequest = [];

        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        deleteRequest.push(dataItem.requestNo);
        var kendoWindow = $("<div />").kendoWindow({
            title: "Confirm",
            resizable: false,
            modal: true
        });

        kendoWindow.data("kendoWindow")
            .content($("#delete-confirmation").html())
            .center().open();

        kendoWindow
            .find(".delete-confirm,.delete-cancel")
            .click(function () {
                if ($(this).hasClass("delete-confirm")) {
                    $.ajax({
                        type: "POST",
                        url: "/ManagementSample/DeletedAnalysisRequestInfo",
                        data: JSON.stringify(deleteRequest),
                        dataType: "json",
                        contentType: "application/json",
                        success: function () {
                            reLoadData();
                            var notification = $("#notification").data("kendoNotification");
                            notification.show({
                                message: "Delete Successful"
                            }, "success");

                        },
                        error: function () {

                        }
                    });
                }

                kendoWindow.data("kendoWindow").close();
            })
            .end()


    }
    function onChangex(arg) {
        var grid = $("#Grid").data("kendoGrid");
        var selectedItem = grid.dataItem(grid.select());
        codeSample = selectedItem.sampleCode;
        codeRequest = selectedItem.requestNo;
        nameSample = selectedItem.sampleName;
        customerName = selectedItem.companyName;
    }

    function showEdit() {

    }
    function schemaData() {

        return data;
    }
    function schemaTotal(response) {
        return data.length;
    }
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }
    

    function returnFalse() {
        return false;
    }
    function onDataBound(e) {
        var grid = this;
        grid.table.find("tr").each(function () {
            var dataItem = grid.dataItem(this);
            var type = dataItem.Status === 1 ? 'success' : 'info';
            var text = dataItem.Status === 1 ? 'CONFIRMED' : 'NEW';

            $(this).find('script').each(function () {
                eval($(this).html());
            });

            $(this).find(".badgeTemplate").kendoBadge({
                type: type,
                value: text,
            });


            kendo.bind($(this), dataItem);
        });
    }
    function change(e) {
    };
    function onSelectRequestAction(e) {
        var dataItem = this.dataItem(e.item);
        if (codeSample === undefined || codeSample === "") {
            var notification = $("#notification").data("kendoNotification");
            notification.show({
                title: "Wrong Open",
                message: "Please choose one sample."
            }, "error");
            return;
        }
        if (dataItem.Value === "2") {          
            if (codeRequest !== null && codeRequest !== undefined) {
                var oReq = new XMLHttpRequest();
                oReq.open("post", `/ManagementSample/PrintManagementSample?requestNo=${codeRequest}`, true);

                oReq.responseType = "blob";

                oReq.onload = function (oEvent) {
                    var blob = new Blob([oReq.response], { type: "text/csv" });
                    // ...
                    saveAs(blob, "Testing Report.xlsx");
                };
                oReq.send();
            } else {
                var notification = $("#notification").data("kendoNotification");
                notification.show({
                    title: "Wrong Export",
                    message: "Please choose only one Request Code to export."
                }, "error");
            }
           
        } else if (dataItem.Value === "3") {
            if (codeRequest === undefined || codeRequest === "")
                return;
            window.location.href = '/RecordResult/ApproveResult/?' + "requestNo=" + codeRequest;
        }
        if (dataItem.Value === "1") {
            if (codeRequest !== null && codeRequest !== undefined) {
                e.preventDefault();
                var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
                window.location.href = '/CustomerRequest/DetailCustomer/?' + "requestNo=" + codeRequest;
            } else {
                var notification = $("#notification").data("kendoNotification");
                notification.show({
                    title: "Wrong Open",
                    message: "Please choose one sample."
                }, "error");
            }

        }
    }
    function onClicSearch() {
        var dialog = $('#dialog');
        dialog.data("kendoDialog").open();
    }
    function reLoadData() {
        var dataCus = [];
        var date = document.getElementById("dayData").innerHTML;
        if ($("#multiselect").data("kendoMultiSelect") !== undefined) {
            dataCus = $("#multiselect").data("kendoMultiSelect")._old;
        }
        $.ajax({
            type: "GET",
            url: "/ManagementSample/GetManagementSampleList",
            data: {
                startDate: date.split('-')[0],
                endDate: date.split('-')[1],
                customer: JSON.stringify(dataCus)
            },
            dataType: "json",
            beforeSend: function () {
            },
            success: function (response) {
                var grid = $("#Grid").data("kendoGrid");
                var dataSource = new kendo.data.DataSource({
                    data: response,
                    pageSize: 20,
                    schema: {
                        model: {
                            id: "requestNo"
                        }
                    }
                });             
                var dateTemplate = $('#date-templateData').html();
                var renderDateTem = "";
                renderDateTem += Mustache.render(dateTemplate, {
                    day: date.split('-')[0] + '-' + date.split('-')[1]
                });
                $('#dayTem').html(renderDateTem);
            },
            error: function (status) {
            }
        });
    };
</script>


<style>
    .k-window-title k-dialog-title::before {
        content: 'Confirmation' !important;
    }

    .k-grid tr .checkbox-align {
        text-align: center;
        vertical-align: middle;
    }

    .k-grid-content {
        height: auto !important;
    }

    .k-grid tbody tr {
        line-height: 14px !important;
    }

    .btn-raised {
        background-color: #92d050 !important;
        color: #fff !important;
        border-color: #92d050;
    }

    .k-grid-header .k-header > .k-link {
        margin: -8px -16px;
        margin-top: -8px;
        margin-right: -16px;
        margin-bottom: -8px;
        margin-left: -16px;
    }

    .k-grid tbody .k-button {
        min-width: 0px !important;
        height: 20px;
    }

    div.k-window {
        min-width: 15% !important;
    }

    .k-notification h3 {
        padding: 30px 10px 5px;
        font-size: 1em;
        line-height: normal;
    }

    .k-notification img {
        margin: 20px;
        float: left;
    }


    /* Info template */
    .new-mail {
        width: 300px;
        height: 100px;
    }

    /* Error template */
    .wrong-pass {
        width: 300px;
        height: 100px;
    }

    /* Success template */
    .upload-success {
        width: 300px;
        height: 50px;
    }


    /* For Bootstrap v4 theme */
    .k-bootstrap-v4 .k-notification h3 {
        padding: 10px 10px 5px;
    }

    .k-bootstrap-v4 .k-notification img {
        margin: 10px 20px 0 0;
    }

    .k-bootstrap-v4 .new-mail,
    .k-bootstrap-v4 .wrong-pass,
    .k-bootstrap-v4 .upload-success {
        width: calc( 300px - 2.5rem );
        height: calc( 100px - 1.5rem );
    }


    /* For Material v2 theme */
    .k-material-v2 .k-notification h3 {
        padding: 10px 10px 5px;
    }

    .k-material-v2 .k-notification img {
        margin: 10px 20px 0 0;
    }

    .k-widget k-dropdown {
        margin-left: 12px !important;
        margin-top: 25px !important;
    }

    .k-grid {
        font-size: 1em;
    }

    .card-body {
        padding-top: 0;
        font-size: 10px;
    }

    .k-grid th, .k-grid td {
        padding: 8px 6px;
    }

    .k-grid-content {
        font-size: 1.3em;
    }

    .k-link {
        font-size: 1.1em;
    }

    .k-material-v2 .new-mail,
    .k-material-v2 .wrong-pass,
    .k-material-v2 .upload-success {
        width: 270px;
        height: 70px;
    }
</style>
<script id="date-templateData" type="x-tmpl-mustache">
    <h6 id="dayData">{{day}}</h6>
</script>
<script id="delete-confirmation" type="text/x-kendo-template">
    <p class="delete-message">Are you sure?</p>

    <button class="delete-confirm k-button">Yes</button>
    <a href="#" class="delete-cancel">No</a>
</script>
<script id="errorTemplate" type="text/x-kendo-template">
    <div class="wrong-pass">
        <h3>#= title #</h3>
        <p>#= message #</p>
    </div>
</script>
<script id="successTemplate" type="text/x-kendo-template">
    <div class="upload-success">
        <img src="@Url.Content("~/Shared/success-icon.png")" />
        <h3>#= message #</h3>
    </div>
</script>