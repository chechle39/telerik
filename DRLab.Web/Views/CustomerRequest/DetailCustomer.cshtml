@model DRLab.Data.ViewModels.AnalysisRequest_InfoStringDate
@{
    ViewData["Title"] = "DetailCustomer";
}
@section Scripts{
    <script src="~/app/Customer/EditCustomer.js" asp-append-version="true"></script>
    <script>
        var detailObj = new customerDetailController();
        detailObj.initialize();
    </script>
}
@(Html.Kendo().Notification()
    .Name("notificationEdit")
    .Position(p => p.Pinned(true).Top(30).Right(30))
    .Stacking(NotificationStackingSettings.Down)
    .Templates(t =>
    {
        t.Add().Type("success").ClientTemplateID("successTemplate");
        t.Add().Type("error").ClientTemplateID("errorTemplate");
    })
)
<h1 hidden id="flag">@Model.numberSample</h1>
<h1 hidden id="flag2">@Model.dateOfSendingResult</h1>
<h1 hidden id="flag3">@Model.receivceDate</h1>
<h1 hidden id="flag4">@Model.requestNo</h1>
<h1 hidden id="flag5">@Model.email</h1>
<h1 hidden id="flag6">@Model.contactName</h1>
<h1 hidden id="flag7">@Model.contactName</h1>
<h1 hidden id="flag8">@Model.customerCode</h1>
<h1 hidden id="flag9">@Model.receivceDate</h1>
<h1 hidden id="flag10">@Model.dateOfSendingResult</h1>
<section id="isCheck" class="content">
    <div class="container-fluid">
        <section class="content">
            <div class="container-fluid">
                <div class="row">
                    <!-- left column -->
                    <div class="col-md-12">
                        <!-- general form elements -->
                        <div class="card">
                            <form id="ticketsForm" class="k-form k-form-vertical" kendo-validator="true">
                                <div class="card-header row" style="margin-left: 0px;">

                                    <div class="col-4">
                                        <h3 class="card-title" style="font-size: 25px">Edit Request</h3>


                                    </div>
                                    <div class="col-3">
                                        @(Html.Kendo().DropDownList()
                                        .Name("color")
                                        .DataTextField("Text")
                                        .DataValueField("Value")
                                        .Events(e => e.Change("change"))
                                        .BindTo(new List<SelectListItem>() {
                                        new SelectListItem() {
                                            Text = "Print Request",
                                            Value = "1"
                                        },
                                        new SelectListItem() {
                                                Text = "Export For Lab",
                                                Value = "2"
                                        },
                                        })
                                    .Value("1")
                                    .HtmlAttributes(new { style = "width: 100%" })
                                        )
                                    </div>
                                    <div class="col-5">
                                        <div style="float:right">
                                            <button onclick="SaveEntity()" type="submit" class="btn btn-raised">Save</button>
                                            <button class="btn btn-cancel">Cancel</button>
                                        </div>

                                    </div>

                                </div>
                                <!-- /.card-header -->
                                <!-- form start -->
                                <div class="card-body">
                                    <div id="tbl-content">

                                    </div>

                                    <div class="form-group row pad-25">

                                    </div>
                                    <div class="form-group row" style="    padding-bottom: 15px;
">
                                        <div class="col-2">
                                            <span style="color: #922999;text-decoration: underline double;">Sample List</span>
                                        </div>

                                        <div class="box pagination">
                                        </div>
                                    </div>

                                    <div class="form-group row margin-left-0">
                                        <div class="col-5 row">
                                            <span>Sample Name</span>

                                            <div class="col-sm-9 mr-t ">
                                                <textarea id="simpleName" required="required" placeholder="Sample Name" class="k-textbox" style="margin-left: 7px;width: 100%;height: calc(1.42857143em + 10px)"></textarea>
                                            </div>
                                        </div>

                                        <div class="row col-5">
                                            <span>Sample Code</span>
                                            <div class="col-sm-9 mr-t">
                                                @(Html.Kendo().TextBox()
                                                .Name("simpleCode")
                                                .HtmlAttributes(new { placeholder = "Sample Code", style = "width: 50%;height: calc(1.42857143em + 10px);margin-left: 8px" })
                                                )

                                            </div>

                                        </div>

                                    </div>
                                    <div class="form-group row margin-left-0">

                                        <div class="col-5 row">
                                            <span>Description</span>
                                            <div class="col-sm-9 mr-t">
                                                <textarea id="descriptionCustomer" placeholder="Description" class="k-textbox" style="width: 100%;margin-left: 21px;height: calc(1.42857143em + 10px)"></textarea>
                                            </div>
                                        </div>

                                        <div class="row col-5">
                                            <span>Inner Code</span>
                                            <div class="col-sm-9 mr-t">
                                                @(Html.Kendo().TextBox()
                                                .Name("innerCode")
                                                .HtmlAttributes(new { placeholder = "Inner Code", style = "width: 50%;height: calc(1.42857143em + 10px);margin-left: 22px" })
                                                )
                                            </div>

                                        </div>
                                    </div>




                                    <div class="form-group row margin-left-0">

                                        <div class="col-5 row">
                                            <span>Remark To Lab</span>
                                            <div class="col-sm-9 mr-t">
                                                <textarea id="remarkToLab" placeholder="Remark To Lab" class="k-textbox" style="margin-left: 2px;width: 100%;height: calc(1.42857143em + 10px)"></textarea>

                                            </div>
                                        </div>

                                        <div class="row col-5">
                                            <span>Weight</span>
                                            <div class="col-sm-9 mr-t">
                                                @(Html.Kendo().TextBox()
                                                .Name("weight")
                                                .HtmlAttributes(new { placeholder = "Weight", style = "width: 50%;height: calc(1.42857143em + 10px);margin-left: 45px", })
                                                )
                                            </div>

                                        </div>
                                    </div>

                                    <div class="form-group row margin-left-0">

                                        <div class="col-3 row">
                                            <span>Sample Matrix</span>
                                            <div class="col-sm-7 mr-t">
                                                @(Html.Kendo().ComboBox()
                                                .Name("sampleMatrix")
                                                .Placeholder("Select Sample Matrix")
                                                .DataTextField("sampleMatrix")
                                                .DataValueField("matrixID")
                                                .HtmlAttributes(new { style = "width:143%; height:calc(1.42857143em + 10px);margin-left: 5px" })

                                                .AutoBind(false)
                                                .DataSource(source =>
                                                {
                                                    source.Read(read =>
                                                    {
                                                        read.Action("GetSampleMatrix", "SampleMatrix");
                                                    })
                                                    .ServerFiltering(true);
                                                })
                                                 .Filter("startswith")
                                                )
                                            </div>
                                        </div>

                                        <div class="row col-5" style="margin-left: 39px;">
                                            <span>Add Specification</span>
                                            <div class="col-sm-9 row mr-t">
                                                <div class="col-11">
                                                    @(Html.Kendo().ComboBox()
                                                .Name("addSpecification")
                                                .Placeholder("Select Specification")
                                                .DataTextField("specification")
                                                .DataValueField("analysisCode")
                                                .HtmlAttributes(new { style = "width:101%; height:calc(1.42857143em + 10px);margin-left: 7px" })
                                                 .Events(e =>
                                                 {
                                                     e.Select("onSelectaddSpecification");
                                                 })
                                                .Filter(FilterType.Contains)
                                                .AutoBind(false)
                                                .DataSource(source =>
                                                {
                                                    source.Read(read =>
                                                    {
                                                        read.Action("GetTestingInfoCombobox", "Testing_Info");
                                                    })
                                                    .ServerFiltering(true);
                                                })
                                                    )
                                                </div>
                                                <div class="col-1" style="padding-left: 0px;max-width: 1.333333%;margin-top: -5px;">
                                                    @*<span style="margin-top: -2px;">
                                                        @await Html.PartialAsync("../Testing_Info/PartialViewAddTestInfo")
                                                    </span>*@
                                                </div>

                                            </div>

                                        </div>
                                    </div>
                                    <div style="margin-bottom: 25px;">


                                    </div>

                                    <div class="form-group row margin-left-0">

                                        <div class="col-5 row">
                                            <span>Template Mark</span>
                                            <div class="col-sm-5 mr-t">
                                                @(Html.Kendo().TextBox()
                                            .Name("templateMark")
                                            .HtmlAttributes(new { placeholder = "Template Mark", style = "width: 100%;height: calc(1.42857143em + 10px);" })
                                                )
                                            </div>
                                            <span>Save</span>
                                            <span class="pd-left-30">Get</span>
                                        </div>

                                        <div class="col-5 row">
                                            <span>TAT (+/-)</span>
                                            <div class="col-sm-2 mr-t">
                                                @(Html.Kendo().TextBox()
                                            .Name("tat")
                                            .HtmlAttributes(new { placeholder = "TAT", style = "width: 80%;height: calc(1.42857143em + 10px);" })
                                                )
                                            </div>
                                            <span>Done</span>
                                        </div>
                                    </div>

                                    <div class="form-group row">

                                        @(Html.Kendo().Grid<DRLab.Data.ViewModels.E00T_CustomerGridViewModel>()
                                        .Name("Grid")
                                        .HtmlAttributes(new { style = "height:auto;" })
                                        .Columns(columns =>
                                        {
                                            columns.Bound(p => p.specification).Title("Specification").Width("25%");
                                            columns.Bound(p => p.Mark).Title("Mark");
                                            columns.Bound(p => p.method).Title("Method").Width("25%");
                                            columns.Bound(p => p.LOD).Title("LOD");
                                            columns.Bound(p => p.unit).Title("Unit");
                                            columns.Bound(p => p.Price).Title("Price").Width("10%");
                                            columns.Bound(p => p.Urgent).Title("% Urgent");
                                            columns.Bound(p => p.TAT).Title("TAT");
                                            columns.Command(command => { command.Destroy().IconClass("k-icon k-i-trash"); }).Width(100);
                                        })
                                        .Navigatable()
                                        .Editable(editable => editable.Mode(GridEditMode.InCell))
                                        .Pageable()
                                        .Sortable()
                                        .Scrollable()
                                        .DataSource(dataSource => dataSource
                                        .Custom()
                                        .PageSize(20)
                                        .Batch(true)
                                        .Schema(schema =>
                                        {
                                            schema.Model(model =>
                                            {
                                                model.Id(p => p.analysisCode);
                                                model.Field(p => p.analysisCode).Editable(false).From("analysisCode");
                                                model.Field(p => p.specification).From("specification");
                                                model.Field(p => p.Mark).From("Mark");
                                                model.Field(p => p.method).From("method");
                                                model.Field(p => p.LOD).From("LOD");
                                                model.Field(p => p.unit).From("unit");
                                                model.Field(p => p.Price).From("Price");
                                                model.Field(p => p.Urgent).From("Urgent");
                                                model.Field(p => p.TAT).From("TAT");
                                            })
                                            .Data(d => "schemaData")
                                            .Total(t => "schemaTotal");
                                        })))
                                    </div>
                                </div>
                                <!-- /.card-body -->
                                <div id="temlate">

                                </div>


                            </form>
                        </div>
                    </div>
                </div>
                <!-- /.row -->
            </div><!-- /.container-fluid -->
        </section>
    </div><!-- /.container-fluid -->
</section>
@Html.Partial("EditRequestView.cshtml")
<script>
    var data = [];
    myData = [];
    var specdata = [];
    var curent;
    function customFunction(input) {

        if (input.attr('name') === "time" && input.val() == "14:00") {
            return false;
        }

        return true;
    }

    $(function () {
        var validator = $("#ticketsForm").data("kendoValidator");
        var validationSummary = $("#validation-summary");

        $("form").submit(function (event) {
            event.preventDefault();

            if (validator.validate()) {
                validationSummary.html("<div class='k-messagebox k-messagebox-success'>Hooray! Your tickets has been booked!</div>");
            } else {
                validationSummary.html("<div class='k-messagebox k-messagebox-error'>Oops! There is invalid data in the form.</div>");
            }
        });
    });
    function schemaData() {

        return data;

    }
    function schemaTotal(response) {
        return data.length;
    }

    function onSelectaddSpecification(e) {
        var grid = $("#Grid").data("kendoGrid");
        specdata = grid.dataSource._pristineData;
        //grid.bind("save", grid_save);
        var dataItem = this.dataItem(e.item.index());
        $.ajax({
            type: "GET",
            url: "/Testing_Info/GetTestingInfoBySpecId",
            data: { id: dataItem.analysisCode },
            dataType: "json",

            success: function (response) {
                //specdata = response;
                //if (specdata.length > 0) {

                //}
                for (var i = 0; i < response.length; i++) {
                    if (specdata.filter(x => x.analysisCode === response[i].analysisCode).length === 0) {
                        specdata.push(response[i])
                    }
                }
                //data = response;
                schemaTotal(specdata);
                var dataSource = new kendo.data.DataSource({
                    data: specdata,
                    pageSize: 20,
                });
                grid.setDataSource(dataSource);
                var total = 0;
                for (var i = 0; i < response.length; i++) {
                    total += response[i].Price;
                }
                var template = $('#table-total').html();
                var render = "";
                render += Mustache.render(template, {
                    tong: total,
                });
                if (render !== undefined) {
                    $('#temlate').html(render);

                }
            },
            error: function () {

            }
        });
    }

    // load data and style for active page
    myData = [];
    var curent;
    function active_page(element, rows, req_per_page) {
        if (myData.length === 0) {

            $.ajax({
                type: "GET",
                url: "/CustomerRequest/GetAnalysisByRequestNo",
                data: { requestNo: document.getElementById("flag4").innerHTML },
                dataType: "Json",
                success: function (response) {
                    console.log(response);
                    var grid = $("#Grid").data("kendoGrid");
                    myarr = [];
                    reponseGetById = response;
                    if (response.length > 0) {
                        $('#simpleCode').val(response[0].sampleCode);
                        $('#innerCode').val(response[0].LVNCode);
                        $('#simpleName').val(response[0].sampleName);
                        $('#descriptionCustomer').val(response[0].sampleDescription);
                        $('#remarkToLab').val(response[0].remarkToLab);
                        $('#sampleMatrix').val(response[0].sampleMatrix);
                        $('#weight').val(response[0].weight);
                        $('#templateMark').val('');
                        $('#tat').val('');

                        var dataSource = new kendo.data.DataSource({
                            data: response[0].Data,
                            pageSize: 20,
                        });
                        grid.setDataSource(dataSource);
                    } else {
                        //$('#simpleCode').val(response[0].sampleCode);
                        //$('#innerCode').val(response[0].LVNCode);
                        //$('#simpleName').val(response[0].sampleName);
                        //$('#descriptionCustomer').val(response[0].sampleDescription);
                        //$('#remarkToLab').val(response[0].remarkToLab);
                        //$('#sampleMatrix').val(response[0].sampleMatrix);
                        //$('#weight').val(response[0].weight);
                        //$('#templateMark').val('');
                        //$('#tat').val('');

                        var dataSource = new kendo.data.DataSource({
                            data: [],
                            pageSize: 20,
                        });
                        grid.setDataSource(dataSource);
                    }
                    
                    for (var i = 0; i < parseInt(document.getElementById("flag").innerHTML); i++) {
                        if (response[i] !== undefined) {
                            const a = {
                                simpleName: response[i].sampleName,
                                simpleCode: response[i].sampleCode,
                                descriptionCustomer: response[i].sampleDescription,
                                innerCode: response[i].LVNCode,
                                remarkToLab: response[i].remarkToLab,
                                weight: response[i].weight,
                                sampleMatrix: 1,
                                sampleMatrixValue: response[i].sampleMatrix,
                                addSpecification: 1,
                                addSpecificationValue: response[i].specification,
                                templateMark: "",
                                tat: "",
                                data: response[i].Data

                            };
                            myData.push(a);
                        } else {
                            const a = { simpleName: '', simpleCode: '', descriptionCustomer: '', innerCode: '', remarkToLab: '', weight: '', sampleMatrix: -1, sampleMatrixValue: '', addSpecification: -1, addSpecificationValue: '', templateMark: '', tat: '' };
                            myData.push(a);
                        }

                    }
                    
                    var current_page = checkClass(document.getElementsByClassName('active'));
                    var curent = parseInt(current_page[0].innerText)
                    var next_link = document.getElementById('next_link');
                    var prev_link = document.getElementById('prev_link');
                    var next_tab = current_page[0].nextSibling;
                    var prev_tab = current_page[0].previousSibling;
                    current_page[0].className = current_page[0].className.replace("active", "");
                    if (element === "next") {
                        if (parseInt(next_tab.text).toString() === 'NaN') {
                            next_tab.previousSibling.className += " active";
                            next_tab.setAttribute("onclick", "return false");
                        } else {
                            next_tab.className += " active"
                            render_table_rows(myData, parseInt(req_per_page), parseInt(next_tab.text), curent);
                            if (prev_link.getAttribute("onclick") === "return false") {
                                prev_link.setAttribute("onclick", `active_page('prev',\"${myData}\",${req_per_page})`);
                            }
                            if (next_tab.style.display === "none") {
                                next_tab.style.display = "block";
                                hide_from_beginning(prev_link.nextSibling)
                            }
                        }
                    } else if (element === "prev") {
                        if (parseInt(prev_tab.text).toString() === 'NaN') {
                            prev_tab.nextSibling.className += " active";
                            prev_tab.setAttribute("onclick", "return false");
                        } else {
                            prev_tab.className += " active";
                            render_table_rows(myData, parseInt(req_per_page), parseInt(prev_tab.text), curent);
                            if (next_link.getAttribute("onclick") === "return false") {
                                next_link.setAttribute("onclick", `active_page('next',\"${myData}\",${req_per_page})`);
                            }
                            if (prev_tab.style.display === "none") {
                                prev_tab.style.display = "block";
                                hide_from_end(next_link.previousSibling)
                            }
                        }
                    } else {
                        element.className += "active";
                        render_table_rows(myData, parseInt(req_per_page), parseInt(element.text), curent);
                        if (prev_link.getAttribute("onclick") === "return false") {
                            prev_link.setAttribute("onclick", `active_page('prev',\"${myData}\",${req_per_page})`);
                        }
                        if (next_link.getAttribute("onclick") === "return false") {
                            next_link.setAttribute("onclick", `active_page('next',\"${myData}\",${req_per_page})`);
                        }
                    }
                },
                error: function () {
                }
            });
        } else {
            var current_page = checkClass(document.getElementsByClassName('active'));
            var curent = parseInt(current_page[0].innerText)
            var next_link = document.getElementById('next_link');
            var prev_link = document.getElementById('prev_link');
            var next_tab = current_page[0].nextSibling;
            var prev_tab = current_page[0].previousSibling;
            current_page[0].className = current_page[0].className.replace("active", "");
            if (element === "next") {
                if (parseInt(next_tab.text).toString() === 'NaN') {
                    next_tab.previousSibling.className += " active";
                    next_tab.setAttribute("onclick", "return false");
                } else {
                    next_tab.className += " active"
                    render_table_rows(myData, parseInt(req_per_page), parseInt(next_tab.text), curent);
                    if (prev_link.getAttribute("onclick") === "return false") {
                        prev_link.setAttribute("onclick", `active_page('prev',\"${myData}\",${req_per_page})`);
                    }
                    if (next_tab.style.display === "none") {
                        next_tab.style.display = "block";
                        hide_from_beginning(prev_link.nextSibling)
                    }
                }
            } else if (element === "prev") {
                if (parseInt(prev_tab.text).toString() === 'NaN') {
                    prev_tab.nextSibling.className += " active";
                    prev_tab.setAttribute("onclick", "return false");
                } else {
                    prev_tab.className += " active";
                    render_table_rows(myData, parseInt(req_per_page), parseInt(prev_tab.text), curent);
                    if (next_link.getAttribute("onclick") === "return false") {
                        next_link.setAttribute("onclick", `active_page('next',\"${myData}\",${req_per_page})`);
                    }
                    if (prev_tab.style.display === "none") {
                        prev_tab.style.display = "block";
                        hide_from_end(next_link.previousSibling)
                    }
                }
            } else {
                element.className += "active";
                render_table_rows(myData, parseInt(req_per_page), parseInt(element.text), curent);
                if (prev_link.getAttribute("onclick") === "return false") {
                    prev_link.setAttribute("onclick", `active_page('prev',\"${myData}\",${req_per_page})`);
                }
                if (next_link.getAttribute("onclick") === "return false") {
                    next_link.setAttribute("onclick", `active_page('next',\"${myData}\",${req_per_page})`);
                }
            }
        }


    }

    function checkClass(classList) {
        var a = [];
        for (var i = 0; i < classList.length; i++) {
            if (classList[i].className.split(' ').join('') === 'active') {
                a.push(classList[i]);
            }
        }

        return a;
    }
    var response = [];
    function render_table_rows(rows, req_per_page, page_no, curent) {
        response = rows;
        var grid = $("#Grid").data("kendoGrid");
        var comboboxsampleMatrix = $("#sampleMatrix").data("kendoComboBox");
        var comboAddSpecification = $("#addSpecification").data("kendoComboBox");
        response[curent - 1].simpleName = $('#simpleName').val();
        response[curent - 1].simpleCode = $('#simpleCode').val();
        response[curent - 1].descriptionCustomer = $('#descriptionCustomer').val();
        response[curent - 1].innerCode = $('#innerCode').val();
        response[curent - 1].remarkToLab = $('#remarkToLab').val();
        response[curent - 1].sampleMatrix = comboboxsampleMatrix._oldIndex;
        response[curent - 1].weight = $('#weight').val();
        response[curent - 1].addSpecification = comboAddSpecification._oldIndex;
        response[curent - 1].templateMark = $('#templateMark').val();
        response[curent - 1].tat = $('#tat').val();
        response[curent - 1].sampleMatrixValue = comboboxsampleMatrix._prev;
        response[curent - 1].addSpecificationValue = comboAddSpecification._prev;
        // var hander = handerDataGrid()
        response[curent - 1].data = handerDataGrid();
        response[curent - 1].deleted = handerDataGridDeleted();
        const resp = response.slice(req_per_page * (page_no - 1), req_per_page * page_no);
        if (response[page_no - 1].simpleCode === '') {
            var requestNo = ["SampleCode", "InLabCode"];
            $.ajax({
                type: "POST",
                url: "/GetCounter/GetCounterString",
                data: JSON.stringify(requestNo),
                dataType: "json",
                contentType: "application/json",
                success: function (response) {
                    $('#simpleCode').val(response.sampleCode);
                    $('#innerCode').val(response.inLabCode);
                },
                error: function () {
                }
            });
        } else {
            $('#simpleCode').val(response[page_no - 1].simpleCode);
            $('#innerCode').val(response[page_no - 1].innerCode);
        }
        $('#simpleName').val(response[page_no - 1].simpleName);
        $('#descriptionCustomer').val(response[page_no - 1].descriptionCustomer);
        $('#remarkToLab').val(response[page_no - 1].remarkToLab);
        $('#sampleMatrix').val(response[page_no - 1].sampleMatrix);
        $('#weight').val(response[page_no - 1].weight);
        $('#templateMark').val(response[page_no - 1].templateMark);
        $('#tat').val(response[page_no - 1].tat);
        comboboxsampleMatrix.select(parseInt(response[page_no - 1].sampleMatrix));
        if (response[page_no - 1].addSpecificationValue.length > 0) {
            $("#addSpecification").data("kendoComboBox").value(comboAddSpecification.dataSource._pristineData.filter(x => x.specification === response[page_no - 1].addSpecificationValue)[0].analysisCode);

        } else {
            comboAddSpecification.select(parseInt(response[page_no - 1].addSpecification));
        }

        // comboAddSpecification.select(parseInt(response[page_no - 1].addSpecification));
        var dataSource = new kendo.data.DataSource({
            data: response[page_no - 1].data,
            pageSize: 20,
        });
        grid.setDataSource(dataSource);
    }

    function handerDataGridDeleted(request) {
        var myGrid = [];
        var grid = $("#Grid").data("kendoGrid");
        for (var i = 0; i < grid.dataSource._destroyed.length; i++) {
            var object = {
                analysisCode: grid.dataSource._destroyed[i].analysisCode,
                lOD: grid.dataSource._destroyed[i].LOD,
                mark: grid.dataSource._destroyed[i].Mark,
                method: grid.dataSource._destroyed[i].method,
                price: grid.dataSource._destroyed[i].Price,
                specification: grid.dataSource._destroyed[i].specification,
                tAT: grid.dataSource._destroyed[i].TAT,
                unit: grid.dataSource._destroyed[i].unit,
                urgent: grid.dataSource._destroyed[i].Urgent,
            };

            myGrid.push(object);
        }
        return myGrid;
    }
    function handerDataGrid(request) {
        var myGrid = [];
        var grid = $("#Grid").data("kendoGrid");
        for (var i = 0; i < grid._data.length; i++) {
            var object = {
                analysisCode: grid._data[i].analysisCode,
                lOD: grid._data[i].LOD,
                mark: grid._data[i].Mark,
                method: grid._data[i].method,
                price: grid._data[i].Price,
                specification: grid._data[i].specification,
                tAT: grid._data[i].TAT,
                unit: grid._data[i].unit,
                urgent: grid._data[i].Urgent,
            };
            myGrid.push(object);
        }
        return myGrid;
    }
    function SaveEntity() {

        var saveRequest = [];
        if (response.length > 0) {
            var x = checkClass(document.getElementsByClassName('active'))
            var cr = parseInt(x[0].innerText);
            var grid = $("#Grid").data("kendoGrid");
            var comboboxsampleMatrix = $("#sampleMatrix").data("kendoComboBox");
            var comboAddSpecification = $("#addSpecification").data("kendoComboBox");
            response[cr - 1].simpleName = $('#simpleName').val();
            response[cr - 1].simpleCode = $('#simpleCode').val();
            response[cr - 1].descriptionCustomer = $('#descriptionCustomer').val();
            response[cr - 1].innerCode = $('#innerCode').val();
            response[cr - 1].remarkToLab = $('#remarkToLab').val();
            response[cr - 1].sampleMatrix = comboboxsampleMatrix._oldIndex;
            response[cr - 1].weight = $('#weight').val();
            response[cr - 1].addSpecification = comboAddSpecification._oldIndex;
            response[cr - 1].templateMark = $('#templateMark').val();
            response[cr - 1].tat = $('#tat').val();
            response[cr - 1].sampleMatrixValue = comboboxsampleMatrix._prev;
            response[cr - 1].addSpecificationValue = comboAddSpecification._prev;
            response[cr - 1].data = handerDataGrid();
            response[cr - 1].deleted = handerDataGridDeleted();
            for (var i = 0; i < response.length; i++) {
                var arr = [];
                var arrdelete = [];
                if (response[i].data !== undefined) {
                    arr = response[i].data;
                }
                if (response[i].deleted !== undefined) {
                    arrdelete = response[i].deleted;
                }
                const object = {
                    requestNo: document.getElementById("requestNo").innerHTML,
                    lVNCode: response[i].innerCode,
                    sampleCode: response[i].simpleCode,
                    sampleName: response[i].simpleName,
                    sampleDescription: response[i].descriptionCustomer,
                    weight: response[i].weight,
                    remarkToLab: response[i].remarkToLab,
                    sampleMatrix: response[i].sampleMatrixValue,
                    specification: response[i].addSpecificationValue,
                    data: arr,
                    deleted: arrdelete,
                }
                saveRequest.push(object);
            }
            SaveAnalysisRequestData(saveRequest);
        }
        if (response.length === 0) {
            var comboboxsampleMatrix = $("#sampleMatrix").data("kendoComboBox");
            var comboAddSpecification = $("#addSpecification").data("kendoComboBox");
            const object = {
                requestNo: document.getElementById("requestNo").innerHTML,
                lVNCode: $('#innerCode').val(),
                sampleCode: $('#simpleCode').val(),
                sampleName: $('#simpleName').val(),
                sampleDescription: $('#descriptionCustomer').val(),
                weight: $('#weight').val(),
                remarkToLab: $('#remarkToLab').val(),
                sampleMatrix: comboboxsampleMatrix._prev,
                specification: comboAddSpecification._prev,
                data: handerDataGrid(),
                deleted: handerDataGridDeleted(),
            }
            saveRequest.push(object);
            SaveAnalysisRequestData(saveRequest);
        }
    }

    function SaveAnalysisRequestData(SaveRq) {
        // var check = verify(SaveRq);
        //if (check === true) {

        //}

        $.ajax({
            type: "POST",
            url: "/CustomerRequest/SaveEntityAnalysisRequestData",
            data: JSON.stringify(SaveRq),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                var notification = $("#notificationEdit").data("kendoNotification");
                notification.show({
                    message: "Save Successful"
                }, "success");

            },
            error: function () {
                var notification = $("#notificationEdit").data("kendoNotification");
                notification.show({
                    title: "Wrong Save",
                    message: "Save error"
                }, "error");
            }
        });
    }


    function verify(SaveRq) {
        var string = '';
        var string1 = '';
        for (var i = 0; i < SaveRq.length; i++) {
            if (SaveRq[i].data.length > 0 && (SaveRq[i].sampleMatrix === '' || SaveRq[i].sampleMatrix === undefined)) {
                var a = i;
                a++;
                string += a + ',';
                string1 += a;
            }
        }
        if (string1.length > 0) {
            var mess = 'Save error samplematrix of sample lisst' + string.substring(0, string.length - 1);
            var notification = $("#notificationEdit").data("kendoNotification");
            notification.show({
                title: "Wrong Save",
                message: mess
            }, "error");
            return false
        } else {
            return true
        }
    }

</script>

<style>
    /*.k-invalid-msg {
        // display: inline !important;
    }*/

    .k-pager-info {
        display: inherit !important;
    }

    .k-grid-content {
        height: auto !important;
    }

    .k-grid tbody tr {
        line-height: 14px;
    }

    /*.k-button {
        height: 30px;
    }*/

    .btn-raised {
        background-color: #92d050 !important;
        color: #fff !important;
        border-color: #92d050;
    }

    .btn-cancel {
        color: #fff;
        background-color: #868e96;
        border-color: #868e96;
    }

    .k-grid-update {
        height: 30px !important;
        width: 76px;
    }

    .k-grid-cancel {
        height: 30px !important;
    }

    .info-custummer {
        background: #47478c;
    }

    .margin-left-0 {
        margin-left: 0px;
    }

    .form-group {
        margin-bottom: 5px !important;
    }


    .demo-section p {
        margin: 3px 0 20px;
        line-height: 50px;
    }

    .demo-section .k-button {
        width: 250px;
    }


    /* Notifications */
    .k-notification h3 {
        padding: 30px 10px 5px;
        font-size: 1em;
        line-height: normal;
    }

    .k-notification img {
        margin: 20px;
        float: left;
    }


    /* Info template */
    .new-mail {
        width: 300px;
        height: 100px;
    }

    /* Error template */
    .wrong-pass {
        width: 300px;
        height: 100px;
    }

    /* Success template */
    .upload-success {
        width: 300px;
        height: 50px;
    }


    /* For Bootstrap v4 theme */
    .k-bootstrap-v4 .k-notification h3 {
        padding: 10px 10px 5px;
    }

    .k-bootstrap-v4 .k-notification img {
        margin: 10px 20px 0 0;
    }

    .k-bootstrap-v4 .new-mail,
    .k-bootstrap-v4 .wrong-pass,
    .k-bootstrap-v4 .upload-success {
        width: calc( 300px - 2.5rem );
        height: calc( 100px - 1.5rem );
    }


    /* For Material v2 theme */
    .k-material-v2 .k-notification h3 {
        padding: 10px 10px 5px;
    }

    .k-material-v2 .k-notification img {
        margin: 10px 20px 0 0;
    }

    .k-material-v2 .new-mail,
    .k-material-v2 .wrong-pass,
    .k-material-v2 .upload-success {
        width: 270px;
        height: 70px;
    }

    .card-body {
        padding-top: 0;
    }

    .card-header {
        border-bottom: 0px;
    }

    .pad-25 {
        padding-bottom: 25px;
    }
    /*.k-editable {
        background-color: white !important;
    }
    .k-grid-add {
        height: 30px;
        margin-top: -10px;
    }*/
    .mr-t {
        margin-top: -4px;
    }

    .span {
    }
</style>
<script id="errorTemplate" type="text/x-kendo-template">
    <div class="wrong-pass">
        <img src="@Url.Content("~/Shared/error-icon.png")" />
        <h3>#= title #</h3>
        <p>#= message #</p>
    </div>
</script>
<script id="successTemplate" type="text/x-kendo-template">
    <div class="upload-success">
        <img src="@Url.Content("~/Shared/success-icon.png")" />
        <h3>#= message #</h3>
    </div>
</script>
<script id="table-template" type="x-tmpl-mustache">
    <div class="info-custummer">
        <div class="form-group row">
            <div class="col-3">
                <span onclick=openDialog() class="span-underline">Request No: <span id="requestNo">{{requestNo}}</span></span>

            </div>
            <div class="col-9">
                <span style="color: orange;" class="mr-left">Receive Day: {{receivceDate}}</span>
                <span style="color: orange;" class="mr-left">Return Day: {{dateOfSendingResult}}</span>
            </div>
        </div>

        <div class="form-group row">
            <div class="col-3">
                <span>{{companyName}}</span>
            </div>
            <div class="col-9">
                <span style="color: orange;" class="mr-left">{{contactName}}, {{contactEmail}}</span>
            </div>
        </div>
    </div>

</script>
<script id="table-total" type="x-tmpl-mustache">

    <h5 style="float: right;padding-right: 14px">Total: {{tong}}</h5>
</script>
<script>

    function change() {
        var value = $("#color").val();
        $("#cap")
            .toggleClass("black-cap", value == 1)
            .toggleClass("orange-cap", value == 2)
            .toggleClass("grey-cap", value == 3);
    };

    function openDialog() {
        var dialog = $('#dialogEdit');
        var numOfSam = $("#numOfSam").data("kendoNumericTextBox");
        numOfSam.value(@Model.numberSample);
        var comboCustomers = $("#customers").data("kendoComboBox");
        comboCustomers.value(@Model.customerCode);
        var comboContact = $("#contact").data("kendoComboBox");
        comboContact.value(@Model.contactID);
        var date = document.getElementById("flag9").innerHTML;
        var dateRt = document.getElementById("flag9").innerHTML;
        var f = converDate(date);
        var h = converDate(dateRt);
        //var NewDate = kendo.toString(this.value(), 'MM/dd/yyyy');
        //var datetimepicker = $('#datetimepicker').val();
        var datePik = new Date(f);
        var datePikRet = new Date(h);
        $("#datetimepicker").data('kendoDateTimePicker').value(datePik);
        $('#datetimepickerReturn').data('kendoDateTimePicker').value(datePikRet);
        $('#requestNoId').val(document.getElementById("flag4").innerHTML);
        dialog.data("kendoDialog").open();
    }
    function converDate (date) {
        var b = date.split(' ')[0];
        var c = b.split('/');
        var d = c[1] + "/" + c[0] + "/" + c[2]
        var f = d + " " + date.split(' ')[1]
        return f;
    }
</script>